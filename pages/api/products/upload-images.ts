import { NextApiRequest, NextApiResponse } from "next";
import prisma from "../../../lib/prisma";
// Import Prisma

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  try {
    const { productId, thumbnail } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!productId || !Array.isArray(thumbnail) || thumbnail.length === 0) {
      return res.status(400).json({
        message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m ho·∫∑c danh s√°ch ·∫£nh kh√¥ng h·ª£p l·ªá",
      });
    }

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    let product = await prisma.product.findUnique({
      where: { id: productId },
    });

    if (!product) {
      // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi s·∫£n ph·∫©m
      product = await prisma.product.create({
        data: {
          id: productId,
          title: `S·∫£n ph·∫©m ${productId}`, // C√≥ th·ªÉ tu·ª≥ ch·ªânh t√™n
          description: "M√¥ t·∫£ s·∫£n ph·∫©m t·ª± ƒë·ªông t·∫°o",
          thumbnail: thumbnail[0], // L·∫•y ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh ƒë·∫°i di·ªán
        },
      });

      console.log(`üÜï T·∫°o s·∫£n ph·∫©m m·ªõi: ${productId}`);
    } else {
      // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán
      await prisma.product.update({
        where: { id: productId },
        data: {
          thumbnail: thumbnail[0], // L·∫•y ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh ƒë·∫°i di·ªán
        },
      });

      console.log(`‚úÖ C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán cho s·∫£n ph·∫©m ${productId}`);
    }

    // C·∫≠p nh·∫≠t ho·∫∑c th√™m ·∫£nh v√†o b·∫£ng Gallery
    for (const image of thumbnail) {
      await prisma.gallery.create({
        data: {
          product_id: productId,
          thumbnail: image,
        },
      });
    }

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!",
      product,
    });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}
