import { prisma } from "../../../lib/prisma";
import nodemailer from "nodemailer";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "‚ùå Method Not Allowed" });
  }

  const { email } = req.body;

  try {
    // ‚úÖ Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: "‚ö†Ô∏è Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // ‚úÖ T·∫°o token reset password (gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt h√†m t·∫°o token)
    const resetToken = "some-generated-token"; // Thay th·∫ø b·∫±ng h√†m t·∫°o token th·ª±c t·∫ø

    // ‚úÖ L∆∞u token v√†o database (gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt b·∫£ng l∆∞u token)
    await prisma.passwordResetToken.create({
      data: {
        userId: user.id,
        token: resetToken,
        expiresAt: new Date(Date.now() + 3600000), // Token h·∫øt h·∫°n sau 1 gi·ªù
      },
    });

    // ‚úÖ G·ª≠i email reset password
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Reset m·∫≠t kh·∫©u",
      text: `B·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u. Vui l√≤ng click v√†o link sau ƒë·ªÉ reset m·∫≠t kh·∫©u: ${process.env.BASE_URL}/reset-password?token=${resetToken}`,
    };

    await transporter.sendMail(mailOptions);

    return res
      .status(200)
      .json({ message: "‚úÖ Email reset m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
  } catch (error) {
    console.error("üî• L·ªói server:", error);
    return res.status(500).json({ message: "‚ö†Ô∏è L·ªói server, th·ª≠ l·∫°i sau!" });
  }
}
