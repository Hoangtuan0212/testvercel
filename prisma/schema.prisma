generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  product Product[]
}

model Feedback {
  id           Int     @id @default(autoincrement())
  firstname    String? @db.VarChar(50)
  lastname     String? @db.VarChar(50)
  email        String? @db.VarChar(100)
  phone_number String? @db.VarChar(20)
  subject_name String? @db.VarChar(255)
  note         String?
}

model Gallery {
  id         Int      @id @default(autoincrement())
  product_id Int?
  thumbnail  String?  @db.VarChar(255)
  product    Product? @relation(fields: [product_id], references: [id], map: "Gallery_product_id_fkey")

  @@index([product_id], map: "Gallery_product_id_fkey")
}

model Order {
  id           Int          @id @default(autoincrement())
  user_id      Int?
  firstname    String?      @db.VarChar(100)
  lastname     String?      @db.VarChar(100)
  email        String?      @db.VarChar(100)
  phone_number String?      @db.VarChar(20)
  address      String?      @db.VarChar(255)
  note         String?
  order_date   DateTime     @default(now())
  status       Int          @default(0)
  total_money  Int
  user         User?        @relation(fields: [user_id], references: [id], map: "Order_user_id_fkey")
  orderdetail  OrderDetail[]

  @@index([user_id], map: "Order_user_id_fkey")
}

model OrderDetail {
  id          Int      @id @default(autoincrement())
  order_id    Int?
  product_id  Int?
  price       Int
  num         Int
  total_money Int
  order       Order?   @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "OrderDetail_order_id_fkey")
  product     Product? @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "OrderDetail_product_id_fkey")

  @@index([order_id], map: "OrderDetail_order_id_fkey")
  @@index([product_id], map: "OrderDetail_product_id_fkey")
}

model Product {
  id          Int           @id @default(autoincrement())
  category_id Int?
  title       String        @db.VarChar(255)
  price       Int           @default(0)
  discount    Int           @default(0)
  thumbnail   String?       @db.Text
  description String?       @db.LongText
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  gallery     Gallery[]     // Quan hệ 1-n với model Gallery
  orderdetail OrderDetail[] // Quan hệ 1-n với model OrderDetail
  category    Category?     @relation(fields: [category_id], references: [id], map: "Product_category_id_fkey")
  cartItems   CartItem[]    // Quan hệ 1-n với model CartItem

  colors Json? @db.Json
  sizes  Json? @db.Json
  detailDescription String? @db.LongText
  reviews Review[] @relation("ProductReviews")   // ADDED

  @@index([category_id], map: "Product_category_id_fkey")
  @@index([title])
  @@map("products")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  gender    user_gender
  birthDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role_id   Int?
  order     Order[]
  address   Address[]
  role      Role?     @relation(fields: [role_id], references: [id], map: "User_role_id_fkey")
  carts     Cart[]    
  // Quan hệ ngược với Cart

   // Thêm relation name "UserReviews" trùng với bên Review
  reviews   Review[]  @relation("UserReviews")

  @@index([role_id], map: "User_role_id_key")
}

model Address {
  id        Int     @id @default(autoincrement())
  userId    Int
  firstName String  @db.VarChar(100)
  lastName  String  @db.VarChar(100)
  company   String? @db.VarChar(255)
  phone     String  @db.VarChar(20)
  street    String  @db.VarChar(255)
  street2   String? @db.VarChar(255)
  city      String  @db.VarChar(100)
  state     String? @db.VarChar(100)
  country   String  @db.VarChar(100)
  zipCode   String? @db.VarChar(20)
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum user_gender {
  MALE
  FEMALE
  OTHER
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int?       @unique
  CartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id])

  // Dòng này để hạn chế 1 userId chỉ có 1 Cart
  // => userId = null cũng chỉ có 1 Cart (cho guest).
}


model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
} 

model Review {
  id         Int       @id @default(autoincrement())
  product_id Int
  user_id    Int?
  rating     Int
  comment    String?
  created_at DateTime  @default(now())

  product    Product   @relation("ProductReviews", fields: [product_id], references: [id], onDelete: Cascade)
  user       User?     @relation("UserReviews", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([user_id])
}

